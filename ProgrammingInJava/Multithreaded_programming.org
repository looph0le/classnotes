#+TITLE: Multithreaded Programming

* Introduction
Unlike many other programming languages, Java provides built-in support for multithreaded programming. A multithreaded program contains two or more parts that can run concurrently(simultaneously).
Each part of such program is called a *thread*, and each thread defines a separate part of execution.


Thus, multithreading is a specialized form of multitasking. There are two distinct types of multitasking -


Process-based and thread-based.


Process-based multitasking is the feature that allows your computer to run two or more programs concurrently. For example, process-based multitasking enables you to run the java compiler at the same time that you are using a text editor. In process based multitasking, a program is the smallest unit of code that can be dispatched by the scheduler.


In a thread-based multitasking environment, the thread is the smallest unit of dispatchable code. This means that a single program can perform two or more tasks simultaneously. For instance, a text editor can formate text at the same time that it is printing, as long as these two actions are being performed by two separate threads.

* Difference Between Multitasking Treads And Multitasking Processes.
Multitasking threads require less overhead than multitasking processes.
** Multitasking processes
Processes are heavyweight tasks that require their own separate address spaces. Interprocess communication is expensive and limited. Context switching from one process to another is also costly.
** Multitasking threads
Threads, on the other hand, are lightweight. They share the same address space and cooperatively share the same heavyweight process. Interthread communication is inexpensive, and context switching from one thread to the next is low

* Thread Priorities
Java assigns to each thread a priority that determines how that thread should be treated with respect to the others. Thread priorities are integers that specify the relative priority of one thread to another. As an absoulte value, a priority is meaningless; a higher-priority thread doesn't run any faster than a lower-priority thread if it is the only thread running. Instead, a thread's priority is used to decide when to switch from one running thread to the next. This is called a *context switch*.


The rules that determine when a context switch takes place are simple:
+ A thread can voluntarily relinquish control. This is done by explicitly yielding, sleeping, or blocking on pending I/O. In this scenario, all other threads are examined, and the highest-priority thread that is ready to run is given the CPU.
+ A thread can be preempted by a higher-priority thread. In this case, a lower-priority thread that does not yield the processor is simple preempted--no matter what it is doing--by a higher-priority thread. Basically, as soon as a higher-priority thread wants to run, it does. This is called *preemptive multitasking*.

In case where two threads with the same priority are competing for CPU cycles, the situation is a bit complicated.


For operating systems such as Windows, threads of equal priority are time-sliced automatically in round-robin fashion. For other types of operating systems, threads of equal priority must voluntarily yield control to their peers. If they don't, the other threads will not run.

* Synchronization
Because multithreading introduces an asynchronous behavior to your program, there must be a way for you to enfore synchronicity when you need it.
For example, if you want two threads to communicate and share a complicated data structure, such as a linked list, you need some way to ensure that they don't conflict with each other. That is, you must prevent one thread from writing data while another thread is in the middle of reading it. For this purpose, Java implements an elegant twist on an age-old model for interprocess synchronization: the *monitor*.


The Monitor is a control mechanism. You can think of a monitor as a very small box that can hold only /one thread/. Once a thread enters a monitor, all other threads must wait until that thread exits the monitor. In this way, a monitor can be used to protect a shared asset from being used manipulated by more than one thread at a time.
Most multithreaded systems expose monitors as objects that your program must explicitly acquire and manipulate. Java provides a cleaner solutions. There is no class "Monitor"; instead, each object has its own implicit monitor that is automatically entered when one of the objects's synchronized methods is called. Once a thread is inside a synchronized method, no other thread can call any other synchronized method on the same object. This enables you to write very clean and concise multithreaded code, because synchronization support in built into the language.

* Messaging
After you divide your program into separate threads, you need to define how they will communicate with each other. When programming with most other languages, you must depend on the operating system to establish communication between threads. This, of course, adds overhead. By contrast, Java provides a clean, low-cost way for two or more threads to talk to each other, via calls to predefined methods that all objects have. Java's messaging system allows a thread to enter a synchronized method on an object, and then wait there until some other thread explicitly notifies it to come out.

* The Thread Class 
Java's multithreading system is built upon the *Thread class*, its method,and its companion interface, *Runnable*.

* Main Thread
When a java program starts up, one thread begins running immediately. This is usually called the /main thread/ of your program, because it is one that is executed when your program begins. The main thread is important because:
+ It is the thread from which other "child" threads will be spawned.
+ Often, it must be the last thread to finish execution because it performs various shutdown actions.

Although the main thread is created automatically when your program is started, it can be controlled through a *Thread* object. To do so you must obtain a reference to it by called the method currentThread(), which is a public static member of Thread.

#+BEGIN_SRC java
static Thread currentThread()
#+END_SRC

This method returns reference to the thread in which it is called. Once you have a reference to the main method, you can control it just like any thread.
